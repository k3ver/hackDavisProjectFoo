import React, { useEffect, useState } from 'react';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import './App.css';
import './NavigationToolbar.css';
import { Desktop } from "./Desktop";
import { signUp, signIn, logout, observeUser } from './authService';
import { auth, db } from './firebase';
import { doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';

const AboutPage = () => (
  <div className="page-container">
    <h1>About MindQuill</h1>
    <p>MindQuill is an interactive learning platform geared toward individuals with dyslexia.</p>
    <p>Upload PDF documents and get instant summaries or short comprehension quizzes generated by the Google Gemini API.</p>
    <p>Create an account to track your progress and get personalized stats!</p>
  </div>
);

const ProgressPage = ({ userProgress }) => (
  <div className="page-container">
    <h1>Your Learning Progress</h1>
    <div className="progress-stats">
      <div className="stat-card">
        <h3>Documents Processed</h3>
        <p className="stat-number">{userProgress.documents_processed || 0}</p>
      </div>
      <div className="stat-card">
        <h3>Quiz Accuracy</h3>
        <p className="stat-number">{userProgress.quiz_accuracy || '0%'}</p>
      </div>
      <div className="stat-card">
        <h3>Minutes Saved</h3>
        <p className="stat-number">{userProgress.minutes_saved || 0}</p>
      </div>
    </div>
    <div className="recent-activity">
      <h2>Recent Activity</h2>
      <ul>
        {(userProgress.recent_activity || []).map((item, idx) => (
          <li key={idx}>{item}</li>
        ))}
      </ul>
    </div>
  </div>
);

const SignInPage = ({ onSignIn }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      await signIn(email, password);
      onSignIn();
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <div className="page-container">
      <h1>Sign In</h1>
      {error && <p className="error-message">{error}</p>}
      <form className="signup-form" onSubmit={handleLogin}>
        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input value={email} onChange={(e) => setEmail(e.target.value)} type="email" required />
        </div>
        <div className="form-group">
          <label htmlFor="password">Password</label>
          <input value={password} onChange={(e) => setPassword(e.target.value)} type="password" required />
        </div>
        <button className="signup-button" type="submit">Sign In</button>
      </form>
    </div>
  );
};

const SignUpPage = () => {
  const [formData, setFormData] = useState({ fullName: '', email: '', password: '', confirmPassword: '' });
  const [error, setError] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (formData.password !== formData.confirmPassword) return setError("Passwords don't match");
    try {
      const userCredential = await signUp(formData.email, formData.password);
      await setDoc(doc(db, 'users', userCredential.user.uid), {
        name: formData.fullName,
        email: formData.email,
        documents_processed: 0,
        quiz_accuracy: '0%',
        total_correct: 0,
        total_answered: 0,
        minutes_saved: 0,
        recent_activity: []
      });
      alert('Account created successfully!');
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <div className="page-container">
      <h1>Create Your Account</h1>
      {error && <div className="error-message">{error}</div>}
      <form className="signup-form" onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="fullName">Full Name</label>
          <input id="fullName" name="fullName" value={formData.fullName} onChange={handleChange} required />
        </div>
        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input id="email" name="email" value={formData.email} onChange={handleChange} required type="email" />
        </div>
        <div className="form-group">
          <label htmlFor="password">Password</label>
          <input id="password" name="password" value={formData.password} onChange={handleChange} required type="password" />
        </div>
        <div className="form-group">
          <label htmlFor="confirmPassword">Confirm Password</label>
          <input id="confirmPassword" name="confirmPassword" value={formData.confirmPassword} onChange={handleChange} required type="password" />
        </div>
        <button type="submit" className="signup-button">Create Account</button>
      </form>
    </div>
  );
};

const TeamFooter = () => {
  return (
    <footer className="team-footer">
      <div className="team-container">
        <h2 className="team-title">Our Team:</h2>
        <div className="team-members">
          <div className="team-member">
            <h3 className="member-name">Beckett Hayes</h3>
            <a href="https://www.linkedin.com/in/beckett-hayes-3a162a25b/" target="_blank" rel="noopener noreferrer" className="linkedin-button">
              LinkedIn
            </a>
          </div>
          <div className="team-member">
            <h3 className="member-name">Omkar Kulkarni</h3>
            <a href="https://www.linkedin.com/in/omkar-kulkarni-b7b742276/" target="_blank" rel="noopener noreferrer" className="linkedin-button">
              LinkedIn
            </a>
          </div>
          <div className="team-member">
            <h3 className="member-name">Kevin Angeles</h3>
            <a href="https://www.linkedin.com/in/angelesmkevin/" target="_blank" rel="noopener noreferrer" className="linkedin-button">
              LinkedIn
            </a>
          </div>
        </div>
      </div>
    </footer>
  );
};

const App = () => {
  const [user, setUser] = useState(null);
  const [userProgress, setUserProgress] = useState({});

  useEffect(() => {
    observeUser(async (authUser) => {
      setUser(authUser);
      if (authUser) {
        const docSnap = await getDoc(doc(db, 'users', authUser.uid));
        if (docSnap.exists()) setUserProgress(docSnap.data());
      }
    });
  }, []);

  const handleSignOut = async () => {
    await logout();
    setUser(null);
    setUserProgress({});
  };

  return (
    <BrowserRouter>
      <div className="App">
        <nav className="navigation-toolbar">
          <div className="logo-container">
            <Link to="/" className="logo-link">MindQuill</Link>
          </div>
          <div className="nav-links">
            <Link to="/" className="nav-link">Home</Link>
            <Link to="/about" className="nav-link">About</Link>
            <Link to="/progress" className="nav-link">Progress</Link>
            {!user && <Link to="/signup" className="nav-link">Sign Up</Link>}
            {!user && <Link to="/signin" className="nav-link">Sign In</Link>}
            {user && <button onClick={handleSignOut} className="nav-link" style={{ font: 'inherit', background: 'none', border: 'none', cursor: 'pointer' }}>Sign Out</button>}
          </div>
        </nav>

        <div className="content-area">
          <Routes>
            <Route path="/" element={<Desktop user={user} setUserProgress={setUserProgress} />} />
            <Route path="/about" element={<AboutPage />} />
            <Route path="/progress" element={<ProgressPage userProgress={userProgress} />} />
            <Route path="/signup" element={<SignUpPage />} />
            <Route path="/signin" element={<SignInPage onSignIn={() => window.location.href = '/'} />} />
          </Routes>
        </div>

        <TeamFooter />
      </div>
    </BrowserRouter>
  );
};

export default App;
